name: Build & Release

on:
  push:
    tags:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch: {}

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ github.ref == 'refs/heads/main' && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Build binaries
    runs-on: ${{ matrix.os.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Linux
            runs-on: ubuntu-latest
            matrix: linux
            artifact-os-name: linux
            executable-extension: ''
          - name: macOS
            runs-on: macos-latest
            matrix: macos
            artifact-os-name: macos
            executable-extension: ''
          - name: Windows
            runs-on: windows-2019
            matrix: windows
            artifact-os-name: windows
            executable-extension: '.exe'
        runs-on: [ ubuntu-latest, windows-2019 ]
        platform: [ amd64 ]
        config:
          - app-name: climate-tokenization-chia
            app-mode: registry
            app-description: "Carbon tokenization engine on the Chia blockchain"
          - app-name: climate-explorer-chia
            app-mode: explorer
            app-description: "Interface for viewing Chia on-chain carbon tokens"
          - app-name: climate-token-client-chia
            app-mode: client
            app-description: "Embedded climate token driver for carbon tokens on the Chia blockchain"
          - app-name: dev-token-driver-chia
            app-mode: dev
            app-description: "Token driver in dev mode"

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Setup Python
        #uses: Chia-Network/actions/setup-python@main
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.8'

      - name: Create .env file
        run: |
          echo "MODE=${{ matrix.config.app-mode }}" > .env
          echo 'CHIA_ROOT="~/.chia/mainnet"' >> .env
          echo 'CONFIG_PATH="climate_token/config/config.yaml"' >> .env

      - name: Create virtual environment
        uses: Chia-Network/actions/create-venv@main
        id: create-venv

      - name: Activate virtual environment
        uses: Chia-Network/actions/activate-venv@main
        with:
          directories: ${{ steps.create-venv.outputs.activate-venv-directories }}

      - name: Install pyinstaller
        run: pip install pyinstaller

      - name: Create virtual environment for Poetry
        uses: Chia-Network/actions/create-venv@main
        id: create-poetry-venv

      - name: Run poetry install
        uses: Chia-Network/actions/poetry@use_temp_venv_for_poetry_itself
        with:
          python-executable: ${{ steps.create-poetry-venv.outputs.python_executable }}

      - name: Run pyinstaller
        run: python -m PyInstaller --clean pyinstaller.spec

      - name: Get tag name
        id: tag-name
        shell: bash
        run: |
          TAGNAME=$(echo $GITHUB_REF | cut -d / -f 3)
          echo "TAGNAME=${TAGNAME}" >> $GITHUB_OUTPUT
          echo "Tag is ${TAGNAME}"
          echo "github.sha is ${{ github.sha }}"

      - name: Install j2
        run: |
          pip install j2cli

      - name: Rename binary
        run: |
          # no -p, we want to be sure this is clean so wildcards below don't get extra files
          mkdir artifacts/
          mv ./dist/main${{ matrix.os.executable-extension }} ./artifacts/${{ matrix.config.app-name }}_${{ steps.tag-name.outputs.TAGNAME || github.sha }}_${{ matrix.platform }}${{ matrix.os.executable-extension }}
        if: matrix.os.matrix == 'windows'

      # Windows Code Signing
      - name: Decode code signing cert into an encrypted file
        uses: kitek/decode-base64-into-file-action@1.0
        with:
          encoded-value: ${{ secrets.WIN_CODE_SIGN_CERT }}
          destination-file: .\win_code_sign_cert.pfx
        if: matrix.os.matrix == 'windows'


      - name: Sign windows artifacts
        uses: chia-network/actions/sign/windows@main
        with:
          certificate_path: .\win_code_sign_cert.pfx
          certificate_password: ${{ secrets.WIN_CODE_SIGN_PASSWORD }}
          file: ./artifacts/${{ matrix.config.app-name }}_${{ steps.tag-name.outputs.TAGNAME || github.sha }}_${{ matrix.platform }}.exe
        if: matrix.os.matrix == 'windows'

      - name: Create .deb Package
        env:
          APP_NAME: ${{ matrix.config.app-name }}
          APP_VERSION: ${{ steps.tag-name.outputs.TAGNAME }}
          PLATFORM: ${{ matrix.platform }}
          APP_DESCRIPTION: ${{ matrix.config.app-description }}
        run: |
          DEB_BASE="${{ matrix.config.app-name }}_${{ steps.tag-name.outputs.TAGNAME || github.sha }}-1_${{ matrix.platform }}"
          mkdir -p deb/$DEB_BASE/usr/local/bin
          cp dist/main deb/$DEB_BASE/usr/local/bin/${{ matrix.config.app-name }}
          chmod +x deb/$DEB_BASE/usr/local/bin/${{ matrix.config.app-name }}
          mkdir -p deb/$DEB_BASE/DEBIAN
          j2 -o "deb/$DEB_BASE/DEBIAN/control" build-scripts/deb/control.j2
          dpkg-deb --build --root-owner-group "deb/$DEB_BASE"
        if: matrix.os.matrix == 'linux'

      - name: Upload deb
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config.app-name }}_${{ steps.tag-name.outputs.TAGNAME || github.sha }}-1_${{ matrix.platform }}.deb
          path: ${{ github.workspace }}/deb/*.deb
          if-no-files-found: error
        if: matrix.os.matrix == 'linux'

      - name: Upload binary
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config.app-name }}-${{ matrix.os.artifact-os-name }}-${{ matrix.platform }}
          path: ${{ github.workspace }}/artifacts/*
          if-no-files-found: error
